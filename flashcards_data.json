{
    "themeConfigurations": {
        "routage": {
            "title": "üåê Flash Cards Routage",
            "subtitle": "R√©visez les concepts essentiels du routage r√©seau",
            "icon": "üåê",
            "yearLevel": "2M",
            "colors": {
                "bg": "linear-gradient(135deg, #1e3c72, #2a5298)",
                "cardFront": "linear-gradient(135deg, #667eea, #764ba2)",
                "cardBack": "linear-gradient(135deg, #f093fb, #f5576c)"
            }
        },
        "programmation": {
            "title": "üíª Flash Cards Programmation",
            "subtitle": "Ma√Ætrisez les concepts de programmation",
            "hidden": false,
            "icon": "üíª",
            "yearLevel": "1M",
            "colors": {
                "bg": "linear-gradient(135deg, #0f4c75, #3282b8)",
                "cardFront": "linear-gradient(135deg, #4834d4, #686de0)",
                "cardBack": "linear-gradient(135deg, #00d2d3, #54a0ff)"
            }
        },
        "logique": {
            "title": "üîå Flash Cards Logique bool√©enne et portes logiques",
            "subtitle": "Ma√Ætrisez la logique bool√©enne et les portes logiques",
            "icon": "üîå",
            "yearLevel": "1M",
            "colors": {
                "bg": "linear-gradient(135deg, #2c3e50, #34495e)",
                "cardFront": "linear-gradient(135deg, #8e44ad, #9b59b6)",
                "cardBack": "linear-gradient(135deg, #e74c3c, #f39c12)"
            }
        }
    },
    "flashcardSets": {
        "routage": {
            "categories": [
                "concepts",
                "rip",
                "ospf",
                "pratique"
            ],
            "categoryNames": {
                "concepts": "Concepts",
                "rip": "RIP",
                "ospf": "OSPF",
                "pratique": "Pratique"
            },
            "cards": [
                {
                    "category": "concepts",
                    "front": "Configuration IP",
                    "question": "Quels sont les deux √©l√©ments essentiels pour configurer un n≈ìud dans un r√©seau ?",
                    "back": "1. <span class='highlight'>Une adresse IP</span> : pour identifier de mani√®re unique la machine sur le r√©seau<br><br>2. <span class='highlight'>Un masque de sous-r√©seau</span> : pour d√©finir quelle partie de l'adresse IP appartient au r√©seau et quelle partie identifie la machine"
                },
                {
                    "category": "rip",
                    "front": "Protocole RIP",
                    "question": "Qu'est-ce que le protocole RIP et quelles sont ses caract√©ristiques ?",
                    "back": "<span class='highlight'>RIP (Routing Information Protocol)</span><br><br>‚Ä¢ Protocole √† <span class='highlight'>vecteur de distance</span><br>‚Ä¢ Utilise l'algorithme de <span class='highlight'>Bellman-Ford</span><br>‚Ä¢ M√©trique : <span class='highlight'>nombre de sauts (hops)</span><br>‚Ä¢ Mise √† jour toutes les <span class='highlight'>30 secondes</span><br>‚Ä¢ Id√©al pour les <span class='highlight'>petits r√©seaux</span>"
                }
            ]
        },
        "programmation": {
            "categories": [
                "boucles",
                "structures",
                "bases"
            ],
            "categoryNames": {
                "boucles": "Boucles",
                "structures": "Structures conditionnelles",
                "bases": "Bases"
            },
            "cards": [
                {
                    "category": "boucles",
                    "front": "Boucle for (born√©e)",
                    "question": "Qu'est-ce qu'une boucle for et comment l'utiliser ?",
                    "back": "Une <span class='highlight'>boucle for</span> (boucle born√©e) r√©p√®te une s√©quence d'instructions un <span class='highlight'>nombre de fois d√©fini</span>.<br><br>‚Ä¢ Syntaxe : <span class='highlight'>for i in range(n):</span><br>‚Ä¢ La variable <span class='highlight'>i</span> prend une valeur diff√©rente √† chaque it√©ration<br>‚Ä¢ <span class='highlight'>range(n)</span> g√©n√®re les valeurs de 0 √† n-1<br>‚Ä¢ Exemple : <code>for i in range(5): print(i)</code> affiche 0, 1, 2, 3, 4"
                },
                {
                    "category": "boucles",
                    "front": "Fonction range()",
                    "question": "Comment utiliser la fonction range() avec ses param√®tres ?",
                    "back": "La fonction <span class='highlight'>range()</span> g√©n√®re une s√©quence de nombres avec 1 √† 3 param√®tres :<br><br>‚Ä¢ <span class='highlight'>start</span> : premier √©l√©ment (par d√©faut 0)<br>‚Ä¢ <span class='highlight'>stop</span> : limite sup√©rieure (exclue)<br>‚Ä¢ <span class='highlight'>step</span> : pas d'incr√©mentation (par d√©faut 1)<br><br>Exemples :<br>‚Ä¢ <code>range(5)</code> ‚Üí 0, 1, 2, 3, 4<br>‚Ä¢ <code>range(2, 8)</code> ‚Üí 2, 3, 4, 5, 6, 7<br>‚Ä¢ <code>range(0, 10, 2)</code> ‚Üí 0, 2, 4, 6, 8"
                },
                {
                    "category": "boucles",
                    "front": "Boucle while (non born√©e)",
                    "question": "Qu'est-ce qu'une boucle while et quelles sont ses r√®gles ?",
                    "back": "Une <span class='highlight'>boucle while</span> (non born√©e) r√©p√®te une t√¢che <span class='highlight'>tant qu'une condition est v√©rifi√©e</span>.<br><br><span class='highlight'>R√®gles essentielles :</span><br>‚Ä¢ <span class='highlight'>Initialiser</span> la variable de contr√¥le avant la boucle<br>‚Ä¢ <span class='highlight'>Modifier</span> cette variable dans la boucle<br>‚Ä¢ Syntaxe : <code>while condition:</code><br><br>‚ö†Ô∏è Sans ces r√®gles, risque de <span class='highlight'>boucle infinie</span> !"
                },
                {
                    "category": "structures",
                    "front": "Instructions conditionnelles",
                    "question": "Comment fonctionnent les instructions conditionnelles if/else ?",
                    "back": "Les <span class='highlight'>instructions conditionnelles</span> ex√©cutent du code selon une condition :<br><br>‚Ä¢ <span class='highlight'>if condition:</span> - ex√©cute si condition vraie<br>‚Ä¢ <span class='highlight'>else:</span> - ex√©cute si condition fausse<br>‚Ä¢ <span class='highlight'>elif condition:</span> - pour conditions multiples<br><br>Une condition est un <span class='highlight'>bool√©en</span> (True/False)"
                },
                {
                    "category": "bases",
                    "front": "Op√©rateurs de comparaison",
                    "question": "Quels sont les op√©rateurs de comparaison en Python ?",
                    "back": "Les <span class='highlight'>op√©rateurs de comparaison</span> :<br><br>‚Ä¢ <span class='highlight'>==</span> : est √©gal √†<br>‚Ä¢ <span class='highlight'>></span> : plus grand que<br>‚Ä¢ <span class='highlight'><</span> : plus petit que<br>‚Ä¢ <span class='highlight'>>=</span> : plus grand ou √©gal<br>‚Ä¢ <span class='highlight'><=</span> : plus petit ou √©gal<br>‚Ä¢ <span class='highlight'>!=</span> : est diff√©rent de<br><br>‚ö†Ô∏è <span class='highlight'>=</span> (affectation) ‚â† <span class='highlight'>==</span> (comparaison)"
                },
                {
                    "category": "bases",
                    "front": "Op√©rateurs logiques",
                    "question": "Quels sont les op√©rateurs logiques et comment les utiliser ?",
                    "back": "Les <span class='highlight'>op√©rateurs logiques</span> combinent des conditions :<br><br>‚Ä¢ <span class='highlight'>and</span> : les deux conditions doivent √™tre vraies<br>‚Ä¢ <span class='highlight'>or</span> : au moins une condition doit √™tre vraie<br>‚Ä¢ <span class='highlight'>not</span> : inverse la condition<br><br>Exemple : <code>if x > 0 and x < 10:</code><br>Priorit√© : <span class='highlight'>not</span> > <span class='highlight'>and</span> > <span class='highlight'>or</span>"
                },
                {
                    "category": "structures",
                    "front": "Diff√©rence for/while",
                    "question": "Quand utiliser for ou while ?",
                    "back": "<span class='highlight'>Boucle for :</span><br>‚Ä¢ Nombre d'it√©rations <span class='highlight'>connu √† l'avance</span><br>‚Ä¢ Parcourir une s√©quence d√©finie<br>‚Ä¢ Plus simple et s√ªre<br><br><span class='highlight'>Boucle while :</span><br>‚Ä¢ Nombre d'it√©rations <span class='highlight'>inconnu</span><br>‚Ä¢ Condition d'arr√™t complexe<br>‚Ä¢ Attendre un √©v√©nement<br>‚Ä¢ Risque de boucle infinie si mal √©crite"
                },
                {
                    "category": "structures",
                    "front": "Structure elif",
                    "question": "Comment utiliser elif pour les conditions multiples ?",
                    "back": "<span class='highlight'>elif</span> permet d'ajouter des conditions suppl√©mentaires :<br><br><code>if condition1:<br>&nbsp;&nbsp;# code 1<br>elif condition2:<br>&nbsp;&nbsp;# code 2<br>else:<br>&nbsp;&nbsp;# code par d√©faut</code><br><br>‚Ä¢ √âvaluation <span class='highlight'>s√©quentielle</span><br>‚Ä¢ D√®s qu'une condition est vraie, les autres ne sont pas test√©es<br>‚Ä¢ Plus efficace que plusieurs if s√©par√©s"
                },
                {
                    "category": "bases",
                    "front": "Variables de contr√¥le",
                    "question": "Qu'est-ce qu'une variable de contr√¥le dans une boucle ?",
                    "back": "Une <span class='highlight'>variable de contr√¥le</span> d√©termine le comportement d'une boucle :<br><br><span class='highlight'>Dans for :</span><br>‚Ä¢ Variable automatique (ex: <code>i</code> dans <code>for i in range()</code>)<br>‚Ä¢ Valeur g√©r√©e par Python<br><br><span class='highlight'>Dans while :</span><br>‚Ä¢ Variable √† <span class='highlight'>initialiser</span> avant la boucle<br>‚Ä¢ Variable √† <span class='highlight'>modifier</span> dans la boucle<br>‚Ä¢ Contr√¥le la condition d'arr√™t"
                }
            ]
        },
        "logique": {
            "categories": [
                "concepts",
                "operateurs",
                "portes",
                "expressions"
            ],
            "categoryNames": {
                "concepts": "Concepts",
                "operateurs": "Op√©rateurs",
                "portes": "Portes logiques",
                "expressions": "Expressions"
            },
            "cards": [
                {
                    "category": "concepts",
                    "front": "Variable bool√©enne",
                    "question": "Qu'est-ce qu'une variable bool√©enne ?",
                    "back": "Une <span class='highlight'>variable bool√©enne</span> est une variable qui ne peut avoir que <span class='highlight'>deux √©tats possibles</span>.<br><br>‚Ä¢ Ces √©tats sont g√©n√©ralement <span class='highlight'>Vrai et Faux</span><br>‚Ä¢ Peut repr√©senter n'importe quelle paire de valeurs<br>‚Ä¢ Peut √™tre stock√©e sous forme d'un <span class='highlight'>seul bit</span>"
                },
                {
                    "category": "concepts",
                    "front": "√ânonc√© logique",
                    "question": "Qu'est-ce qu'un √©nonc√© logique ?",
                    "back": "Un <span class='highlight'>√©nonc√© logique</span> est une d√©claration qui s'√©value soit √† <span class='highlight'>Vrai</span>, soit √† <span class='highlight'>Faux</span>.<br><br>Exemple : ¬´ Il pleut ¬ª est un √©nonc√© logique car on peut v√©rifier si cet √©nonc√© est Vrai ou Faux."
                },
                {
                    "category": "operateurs",
                    "front": "Op√©ration ET (AND)",
                    "question": "Comment fonctionne l'op√©ration ET (AND) ?",
                    "back": "L'op√©ration <span class='highlight'>ET</span> combine deux √©nonc√©s logiques et renvoie <span class='highlight'>Vrai uniquement si les deux √©nonc√©s sont Vrais</span>.<br><br>‚Ä¢ Symbole : <span class='highlight'>‚àß</span><br>‚Ä¢ A ET B s'√©crit : <span class='highlight'>A ‚àß B</span><br>‚Ä¢ Exemple : ¬´ Il fait soleil ET il fait chaud ¬ª"
                },
                {
                    "category": "operateurs",
                    "front": "Op√©ration OU (OR)",
                    "question": "Comment fonctionne l'op√©ration OU (OR) ?",
                    "back": "L'op√©ration <span class='highlight'>OU</span> combine deux √©nonc√©s logiques et renvoie <span class='highlight'>Vrai si au moins un des √©nonc√©s est Vrai</span>.<br><br>‚Ä¢ Symbole : <span class='highlight'>‚à®</span><br>‚Ä¢ A OU B s'√©crit : <span class='highlight'>A ‚à® B</span><br>‚Ä¢ Exemple : ¬´ Il fait soleil OU il fait chaud ¬ª"
                },
                {
                    "category": "operateurs",
                    "front": "Op√©ration NON (NOT)",
                    "question": "Comment fonctionne l'op√©ration NON (NOT) ?",
                    "back": "L'op√©ration <span class='highlight'>NON</span> inverse la valeur d'un √©nonc√© logique.<br><br>‚Ä¢ Si l'√©nonc√© est Vrai, NON renvoie <span class='highlight'>Faux</span><br>‚Ä¢ Si l'√©nonc√© est Faux, NON renvoie <span class='highlight'>Vrai</span><br>‚Ä¢ Symbole : <span class='highlight'>¬¨</span><br>‚Ä¢ NON A s'√©crit : <span class='highlight'>¬¨A</span>"
                },
                {
                    "category": "expressions",
                    "front": "Ordre de priorit√©",
                    "question": "Quel est l'ordre de priorit√© des op√©rateurs bool√©ens ?",
                    "back": "Ordre de priorit√© (du plus √©lev√© au plus bas) :<br><br>1. <span class='highlight'>NON</span> (priorit√© la plus √©lev√©e)<br>2. <span class='highlight'>ET</span><br>3. <span class='highlight'>OU</span> (priorit√© la plus basse)<br><br>Les <span class='highlight'>parenth√®ses</span> peuvent modifier l'ordre de priorit√© par d√©faut."
                },
                {
                    "category": "portes",
                    "front": "Porte logique",
                    "question": "Qu'est-ce qu'une porte logique ?",
                    "back": "Une <span class='highlight'>porte logique</span> est un composant fondamental d'un circuit num√©rique.<br><br>‚Ä¢ Poss√®de <span class='highlight'>une ou plusieurs entr√©es</span><br>‚Ä¢ Produit <span class='highlight'>une seule sortie</span> qui d√©pend des entr√©es<br>‚Ä¢ Entr√©es/sorties : valeurs binaires <span class='highlight'>0 et 1</span><br>‚Ä¢ 1 (Vrai) = tension √©lev√©e, 0 (Faux) = tension basse"
                },
                {
                    "category": "portes",
                    "front": "Porte XOR",
                    "question": "Comment fonctionne la porte XOR (OU exclusif) ?",
                    "back": "La porte <span class='highlight'>XOR</span> (eXclusive OR) produit une sortie de <span class='highlight'>1 si une seule des entr√©es est 1</span>, mais pas les deux.<br><br>‚Ä¢ Expression : <span class='highlight'>Q = A ‚äï B</span><br>‚Ä¢ Table de v√©rit√© :<br>&nbsp;&nbsp;0‚äï0 = 0<br>&nbsp;&nbsp;0‚äï1 = 1<br>&nbsp;&nbsp;1‚äï0 = 1<br>&nbsp;&nbsp;1‚äï1 = 0"
                },
                {
                    "category": "portes",
                    "front": "Porte NAND",
                    "question": "Comment fonctionne la porte NAND (NON-ET) ?",
                    "back": "La porte <span class='highlight'>NAND</span> combine la logique d'une porte AND et d'une porte NOT. Elle produit <span class='highlight'>l'inverse de la sortie d'une porte AND</span>.<br><br>‚Ä¢ Expression : <span class='highlight'>Q = A ‚àß B</span> (A ET B barr√©)<br>‚Ä¢ Sortie = 0 seulement quand A=1 ET B=1<br>‚Ä¢ Sinon sortie = 1"
                },
                {
                    "category": "portes",
                    "front": "Porte NOR",
                    "question": "Comment fonctionne la porte NOR (NON-OU) ?",
                    "back": "La porte <span class='highlight'>NOR</span> combine la logique d'une porte OR et d'une porte NOT. Elle produit <span class='highlight'>l'inverse de la sortie d'une porte OR</span>.<br><br>‚Ä¢ Expression : <span class='highlight'>Q = A ‚à® B</span> (A OU B barr√©)<br>‚Ä¢ Sortie = 1 seulement quand A=0 ET B=0<br>‚Ä¢ Sinon sortie = 0"
                },
                {
                    "category": "portes",
                    "front": "Portes √† entr√©es multiples",
                    "question": "Comment fonctionnent les portes logiques √† entr√©es multiples ?",
                    "back": "Les portes logiques peuvent accepter <span class='highlight'>plus de deux entr√©es</span>.<br><br>Exemples d'expressions :<br>‚Ä¢ AND 3 entr√©es : <span class='highlight'>Q = A ‚àß B ‚àß C</span><br>‚Ä¢ OR 3 entr√©es : <span class='highlight'>Q = A ‚à® B ‚à® C</span><br>‚Ä¢ XOR 3 entr√©es : <span class='highlight'>Q = A ‚äï B ‚äï C</span><br><br>Une seule porte impl√©mente la logique de plusieurs portes en s√©rie."
                }
            ]
        }
    }
}